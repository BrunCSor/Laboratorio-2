
Lab 2 Intrupciones 2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000416  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000416  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000445  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000453  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c9b  00000000  00000000  000004d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000743  00000000  00000000  0000116e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000508  00000000  00000000  000018b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  00001dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b0  00000000  00000000  000020d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002380  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000374  00000374  00000408  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000023f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_2 00000054  000001e6  000001e6  0000027a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.ADC_read 00000034  0000023a  0000023a  000002ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.ADC_init 0000000e  00000346  00000346  000003da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.confPWM 00000028  000002ce  000002ce  00000362  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.confPWM_2 0000002e  000002a0  000002a0  00000334  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.confPWM_3 00000020  000002f6  000002f6  0000038a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PWM_1   00000008  00000354  00000354  000003e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.PWM_2   00000008  0000035c  0000035c  000003f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.PWM_3   00000008  00000364  00000364  000003f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.PWM_4   00000008  0000036c  0000036c  00000400  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.SEN     00000032  0000026e  0000026e  00000302  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.EICRACONFIG 0000001a  00000316  00000316  000003aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.main    00000124  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .bss.on       00000002  00800100  00800100  00000416  2**0
                  ALLOC
 28 .text.__dummy_fini 00000002  0000037c  0000037c  00000410  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__dummy_funcs_on_exit 00000002  0000037e  0000037e  00000412  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__dummy_simulator_exit 00000002  00000380  00000380  00000414  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.exit    00000016  00000330  00000330  000003c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text._Exit   00000004  00000378  00000378  0000040c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
   8:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__vector_2>
   c:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  10:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  14:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  18:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  1c:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  20:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  24:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  28:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  2c:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  30:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  34:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  38:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  3c:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  40:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  44:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  48:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  4c:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  50:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  54:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  58:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  5c:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  60:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>
  64:	0c 94 ba 01 	jmp	0x374	; 0x374 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 02       	muls	r16, r17
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <_etext>
  ba:	0c 94 98 01 	jmp	0x330	; 0x330 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

00000374 <__bad_interrupt>:
 374:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_2:

000001e6 <__vector_2>:
#define Valor_PWM_4 255
int on=0;


ISR(INT1_vect) // Función que se ejecuta cuando se produce la interrupción INT0
{
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	2f 93       	push	r18
 1f2:	8f 93       	push	r24
 1f4:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	2f ef       	ldi	r18, 0xFF	; 255
 1f8:	8b e7       	ldi	r24, 0x7B	; 123
 1fa:	92 e9       	ldi	r25, 0x92	; 146
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	90 40       	sbci	r25, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <__vector_2+0x16>
 204:	00 c0       	rjmp	.+0      	; 0x206 <__vector_2+0x20>
 206:	00 00       	nop
	_delay_ms(3000); // pausa de 3s después de presionar el botón
	if (on == 1){
 208:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 20c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	29 f4       	brne	.+10     	; 0x21e <__vector_2+0x38>
		on = 0;
 214:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 218:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 21c:	06 c0       	rjmp	.+12     	; 0x22a <__vector_2+0x44>
		} else {
		on = 1;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 226:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	2f 91       	pop	r18
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

Disassembly of section .text.ADC_read:

0000023a <ADC_read>:


uint16_t ADC_read(uint8_t ch) {

	ch &= 0b00000111;
 23a:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;
 23c:	ec e7       	ldi	r30, 0x7C	; 124
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	90 81       	ld	r25, Z
 242:	98 7f       	andi	r25, 0xF8	; 248
 244:	89 2b       	or	r24, r25
 246:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
 248:	ea e7       	ldi	r30, 0x7A	; 122
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	80 64       	ori	r24, 0x40	; 64
 250:	80 83       	st	Z, r24
	
	while(!(ADCSRA & (1<<ADIF)));
 252:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 256:	84 ff       	sbrs	r24, 4
 258:	fc cf       	rjmp	.-8      	; 0x252 <ADC_read+0x18>
	ADCSRA|=(1<<ADIF);
 25a:	ea e7       	ldi	r30, 0x7A	; 122
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	80 61       	ori	r24, 0x10	; 16
 262:	80 83       	st	Z, r24

	return (ADC);
 264:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 268:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 26c:	08 95       	ret

Disassembly of section .text.ADC_init:

00000346 <ADC_init>:
	return 0;
}


void ADC_init() {
	ADMUX = (1<<REFS0);
 346:	80 e4       	ldi	r24, 0x40	; 64
 348:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 34c:	87 e8       	ldi	r24, 0x87	; 135
 34e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 352:	08 95       	ret

Disassembly of section .text.confPWM:

000002ce <confPWM>:
}

void confPWM(){
	// PB1 Activado
	DDRD |= (1 << DDD5)|(1 << DDD6);
 2ce:	8a b1       	in	r24, 0x0a	; 10
 2d0:	80 66       	ori	r24, 0x60	; 96
 2d2:	8a b9       	out	0x0a, r24	; 10
	
	// no invertido
	TCCR1A |= (1 << COM1A1)|(1 << COM1B1);
 2d4:	e0 e8       	ldi	r30, 0x80	; 128
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	80 6a       	ori	r24, 0xA0	; 160
 2dc:	80 83       	st	Z, r24
	
	// Fast PWM mode usando ICR1 como TOP
	TCCR1A |= (1 << WGM11);
 2de:	80 81       	ld	r24, Z
 2e0:	82 60       	ori	r24, 0x02	; 2
 2e2:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
 2e4:	e1 e8       	ldi	r30, 0x81	; 129
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	88 61       	ori	r24, 0x18	; 24
 2ec:	80 83       	st	Z, r24
	
	// Timer con preescaler de 8
	TCCR1B |= (1 << CS11);
 2ee:	80 81       	ld	r24, Z
 2f0:	82 60       	ori	r24, 0x02	; 2
 2f2:	80 83       	st	Z, r24
 2f4:	08 95       	ret

Disassembly of section .text.confPWM_2:

000002a0 <confPWM_2>:
}

void confPWM_2(){
	// PB1 Activado
	DDRD |= (1 << DDD5);
 2a0:	8a b1       	in	r24, 0x0a	; 10
 2a2:	80 62       	ori	r24, 0x20	; 32
 2a4:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << DDD6);
 2a6:	8a b1       	in	r24, 0x0a	; 10
 2a8:	8f 7b       	andi	r24, 0xBF	; 191
 2aa:	8a b9       	out	0x0a, r24	; 10
	// no invertido
	TCCR1A |= (1 << COM1A1)|(1 << COM1B1);
 2ac:	e0 e8       	ldi	r30, 0x80	; 128
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	80 6a       	ori	r24, 0xA0	; 160
 2b4:	80 83       	st	Z, r24
	
	// Fast PWM mode usando ICR1 como TOP
	TCCR1A |= (1 << WGM11);
 2b6:	80 81       	ld	r24, Z
 2b8:	82 60       	ori	r24, 0x02	; 2
 2ba:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
 2bc:	e1 e8       	ldi	r30, 0x81	; 129
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	88 61       	ori	r24, 0x18	; 24
 2c4:	80 83       	st	Z, r24
	
	// Timer con preescaler de 8
	TCCR1B |= (1 << CS11);
 2c6:	80 81       	ld	r24, Z
 2c8:	82 60       	ori	r24, 0x02	; 2
 2ca:	80 83       	st	Z, r24
 2cc:	08 95       	ret

Disassembly of section .text.confPWM_3:

000002f6 <confPWM_3>:

}

void confPWM_3(){
	// PB1 Activado
	DDRD &= ~(1 << DDD5);
 2f6:	8a b1       	in	r24, 0x0a	; 10
 2f8:	8f 7d       	andi	r24, 0xDF	; 223
 2fa:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD6);
 2fc:	8a b1       	in	r24, 0x0a	; 10
 2fe:	80 64       	ori	r24, 0x40	; 64
 300:	8a b9       	out	0x0a, r24	; 10
	// Configurar Timer0 en modo Fast PWM
	TCCR0A |= (1 << WGM00)|(1 << WGM01);
 302:	84 b5       	in	r24, 0x24	; 36
 304:	83 60       	ori	r24, 0x03	; 3
 306:	84 bd       	out	0x24, r24	; 36
	
	// Configurar Timer0 para no invertir la señal PWM
	TCCR0A |= (1 << COM0A1)|(1 << COM0B1);
 308:	84 b5       	in	r24, 0x24	; 36
 30a:	80 6a       	ori	r24, 0xA0	; 160
 30c:	84 bd       	out	0x24, r24	; 36
	
	// Iniciar Timer0 con preescaler de 8
	TCCR0B |= (1 << CS11);
 30e:	85 b5       	in	r24, 0x25	; 37
 310:	82 60       	ori	r24, 0x02	; 2
 312:	85 bd       	out	0x25, r24	; 37
 314:	08 95       	ret

Disassembly of section .text.PWM_1:

00000354 <PWM_1>:

}

void PWM_1(){
	OCR0A = Valor_PWM_1;
 354:	84 e1       	ldi	r24, 0x14	; 20
 356:	87 bd       	out	0x27, r24	; 39
	OCR0B = Valor_PWM_1;
 358:	88 bd       	out	0x28, r24	; 40
 35a:	08 95       	ret

Disassembly of section .text.PWM_2:

0000035c <PWM_2>:
}

void PWM_2(){

	
	OCR0A = Valor_PWM_2;
 35c:	82 e3       	ldi	r24, 0x32	; 50
 35e:	87 bd       	out	0x27, r24	; 39
	OCR0B = Valor_PWM_2;
 360:	88 bd       	out	0x28, r24	; 40
 362:	08 95       	ret

Disassembly of section .text.PWM_3:

00000364 <PWM_3>:
}

void PWM_3(){
	
	
	OCR0A = Valor_PWM_3;
 364:	86 e9       	ldi	r24, 0x96	; 150
 366:	87 bd       	out	0x27, r24	; 39
	OCR0B = Valor_PWM_3;
 368:	88 bd       	out	0x28, r24	; 40
 36a:	08 95       	ret

Disassembly of section .text.PWM_4:

0000036c <PWM_4>:
}

void PWM_4(){

	
	OCR0A = Valor_PWM_4;
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	87 bd       	out	0x27, r24	; 39
	OCR0B = Valor_PWM_4;
 370:	88 bd       	out	0x28, r24	; 40
 372:	08 95       	ret

Disassembly of section .text.SEN:

0000026e <SEN>:
	
	
}

void SEN(){
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
	int i = 200;
 272:	c8 ec       	ldi	r28, 0xC8	; 200
 274:	d0 e0       	ldi	r29, 0x00	; 0
	while(i > 100) {
 276:	0e c0       	rjmp	.+28     	; 0x294 <SEN+0x26>
		uint16_t adc_result = ADC_read(0);
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	0e 94 1d 01 	call	0x23a	; 0x23a <ADC_read>

		if(adc_result < 400) {
 27e:	80 39       	cpi	r24, 0x90	; 144
 280:	91 40       	sbci	r25, 0x01	; 1
 282:	20 f4       	brcc	.+8      	; 0x28c <SEN+0x1e>
			PORTD |= (1 << PD1);
 284:	8b b1       	in	r24, 0x0b	; 11
 286:	82 60       	ori	r24, 0x02	; 2
 288:	8b b9       	out	0x0b, r24	; 11
 28a:	03 c0       	rjmp	.+6      	; 0x292 <SEN+0x24>
			} else {
			PORTD &= ~(1 << PD1);
 28c:	8b b1       	in	r24, 0x0b	; 11
 28e:	8d 7f       	andi	r24, 0xFD	; 253
 290:	8b b9       	out	0x0b, r24	; 11
		}
		i--;
 292:	21 97       	sbiw	r28, 0x01	; 1
	
}

void SEN(){
	int i = 200;
	while(i > 100) {
 294:	c5 36       	cpi	r28, 0x65	; 101
 296:	d1 05       	cpc	r29, r1
 298:	7c f7       	brge	.-34     	; 0x278 <SEN+0xa>
		}
		i--;
		_delay_ms(0);
	}
	
}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

Disassembly of section .text.EICRACONFIG:

00000316 <EICRACONFIG>:

void EICRACONFIG(){
	DDRD &= ~(1 << PD3); // Configurar el pin PD3 como entrada
 316:	8a b1       	in	r24, 0x0a	; 10
 318:	87 7f       	andi	r24, 0xF7	; 247
 31a:	8a b9       	out	0x0a, r24	; 10
	//PORTD |= (1 << PD3); // Desactivar la resistencia pull-up interna del pin PD3
	// Configurar el pin PD3 como entrada con pull-up
	EICRA |= (1 << ISC10); // INT1 por cambio de valor
 31c:	e9 e6       	ldi	r30, 0x69	; 105
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 81       	ld	r24, Z
 322:	84 60       	ori	r24, 0x04	; 4
 324:	80 83       	st	Z, r24
	// Habilitar la interrupción
	EIMSK |= (1 << INT1);
 326:	8d b3       	in	r24, 0x1d	; 29
 328:	82 60       	ori	r24, 0x02	; 2
 32a:	8d bb       	out	0x1d, r24	; 29
	sei();
 32c:	78 94       	sei
 32e:	08 95       	ret

Disassembly of section .text.main:

000000c2 <main>:
void SEN();
void EICRACONFIG();


int main(void) {
	ICR1 = F_CPU / (8 * PWM_Frecuencia) - 1;
  c2:	8f e3       	ldi	r24, 0x3F	; 63
  c4:	9f e1       	ldi	r25, 0x1F	; 31
  c6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  ca:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	EICRACONFIG();
  ce:	0e 94 8b 01 	call	0x316	; 0x316 <EICRACONFIG>

	//confPWM();
	DDRD |= (1 << PD1)|(1 << PD2)|(1 << PD4);
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	86 61       	ori	r24, 0x16	; 22
  d6:	8a b9       	out	0x0a, r24	; 10
	DDRC |= (1 << PC2)|(1 << PC4);
  d8:	87 b1       	in	r24, 0x07	; 7
  da:	84 61       	ori	r24, 0x14	; 20
  dc:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1 << PC1)|(1 << PC3);
  de:	87 b1       	in	r24, 0x07	; 7
  e0:	8a 60       	ori	r24, 0x0A	; 10
  e2:	87 b9       	out	0x07, r24	; 7
	//DDRB = 0xFF;
	ADC_init();
  e4:	0e 94 a3 01 	call	0x346	; 0x346 <ADC_init>
	
	while(1) {
		if (on == 1){
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	09 f0       	breq	.+2      	; 0xf6 <main+0x34>
  f4:	5f c0       	rjmp	.+190    	; 0x1b4 <main+0xf2>
			
			SEN();
  f6:	0e 94 37 01 	call	0x26e	; 0x26e <SEN>
			PORTD &= ~(1 << PORTD4); //apago led rojo
  fa:	8b b1       	in	r24, 0x0b	; 11
  fc:	8f 7e       	andi	r24, 0xEF	; 239
  fe:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1 << PORTD2); //prendo led verde
 100:	8b b1       	in	r24, 0x0b	; 11
 102:	84 60       	ori	r24, 0x04	; 4
 104:	8b b9       	out	0x0b, r24	; 11
			PWM_1();
 106:	0e 94 aa 01 	call	0x354	; 0x354 <PWM_1>
			PORTC &= ~(1 << PORTC2);
 10a:	88 b1       	in	r24, 0x08	; 8
 10c:	8b 7f       	andi	r24, 0xFB	; 251
 10e:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1 << PORTC4);
 110:	88 b1       	in	r24, 0x08	; 8
 112:	8f 7e       	andi	r24, 0xEF	; 239
 114:	88 b9       	out	0x08, r24	; 8
			PORTC |= (1 << PORTC1);
 116:	88 b1       	in	r24, 0x08	; 8
 118:	82 60       	ori	r24, 0x02	; 2
 11a:	88 b9       	out	0x08, r24	; 8
			PORTC |= (1 << PORTC3);
 11c:	88 b1       	in	r24, 0x08	; 8
 11e:	88 60       	ori	r24, 0x08	; 8
 120:	88 b9       	out	0x08, r24	; 8
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	8b e7       	ldi	r24, 0x7B	; 123
 126:	92 e9       	ldi	r25, 0x92	; 146
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0x66>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x70>
 132:	00 00       	nop
			_delay_ms(3000);
			

			confPWM_2();
 134:	0e 94 50 01 	call	0x2a0	; 0x2a0 <confPWM_2>
			SEN();
 138:	0e 94 37 01 	call	0x26e	; 0x26e <SEN>
			PWM_2();
 13c:	0e 94 ae 01 	call	0x35c	; 0x35c <PWM_2>
 140:	2f ef       	ldi	r18, 0xFF	; 255
 142:	8b e7       	ldi	r24, 0x7B	; 123
 144:	92 e9       	ldi	r25, 0x92	; 146
 146:	21 50       	subi	r18, 0x01	; 1
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0x84>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x8e>
 150:	00 00       	nop
			_delay_ms(3000);
			
			SEN();
 152:	0e 94 37 01 	call	0x26e	; 0x26e <SEN>
			confPWM_3();
 156:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <confPWM_3>
			PWM_3();
 15a:	0e 94 b2 01 	call	0x364	; 0x364 <PWM_3>
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	8b e7       	ldi	r24, 0x7B	; 123
 162:	92 e9       	ldi	r25, 0x92	; 146
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <main+0xa2>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0xac>
 16e:	00 00       	nop
			_delay_ms(3000);
			
			SEN();
 170:	0e 94 37 01 	call	0x26e	; 0x26e <SEN>
			confPWM();
 174:	0e 94 67 01 	call	0x2ce	; 0x2ce <confPWM>
			PORTD &= ~(1 << PORTD2); //apago led verde
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	8b 7f       	andi	r24, 0xFB	; 251
 17c:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1 << PORTD4); //prendo led rojo
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	80 61       	ori	r24, 0x10	; 16
 182:	8b b9       	out	0x0b, r24	; 11

			PORTC &= ~(1 << PORTC1);
 184:	88 b1       	in	r24, 0x08	; 8
 186:	8d 7f       	andi	r24, 0xFD	; 253
 188:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1 << PORTC3);
 18a:	88 b1       	in	r24, 0x08	; 8
 18c:	87 7f       	andi	r24, 0xF7	; 247
 18e:	88 b9       	out	0x08, r24	; 8
			PORTC |= (1 << PORTC4);
 190:	88 b1       	in	r24, 0x08	; 8
 192:	80 61       	ori	r24, 0x10	; 16
 194:	88 b9       	out	0x08, r24	; 8
			PORTC |= (1 << PORTC2);
 196:	88 b1       	in	r24, 0x08	; 8
 198:	84 60       	ori	r24, 0x04	; 4
 19a:	88 b9       	out	0x08, r24	; 8
			PWM_4();
 19c:	0e 94 b6 01 	call	0x36c	; 0x36c <PWM_4>
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
 1a2:	8b e7       	ldi	r24, 0x7B	; 123
 1a4:	92 e9       	ldi	r25, 0x92	; 146
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0xe4>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0xee>
 1b0:	00 00       	nop
 1b2:	9a cf       	rjmp	.-204    	; 0xe8 <main+0x26>
			_delay_ms(3000);
			} else {
			PORTD |= (1 << PORTD4); //prendo led rojo
 1b4:	8b b1       	in	r24, 0x0b	; 11
 1b6:	80 61       	ori	r24, 0x10	; 16
 1b8:	8b b9       	out	0x0b, r24	; 11
 1ba:	2f ef       	ldi	r18, 0xFF	; 255
 1bc:	8b e7       	ldi	r24, 0x7B	; 123
 1be:	92 e9       	ldi	r25, 0x92	; 146
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <main+0xfe>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0x108>
 1ca:	00 00       	nop
			_delay_ms(3000);
			PORTD &= ~(1 << PORTD4); //apago led rojo
 1cc:	8b b1       	in	r24, 0x0b	; 11
 1ce:	8f 7e       	andi	r24, 0xEF	; 239
 1d0:	8b b9       	out	0x0b, r24	; 11
 1d2:	2f ef       	ldi	r18, 0xFF	; 255
 1d4:	8b e7       	ldi	r24, 0x7B	; 123
 1d6:	92 e9       	ldi	r25, 0x92	; 146
 1d8:	21 50       	subi	r18, 0x01	; 1
 1da:	80 40       	sbci	r24, 0x00	; 0
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <main+0x116>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <main+0x120>
 1e2:	00 00       	nop
 1e4:	81 cf       	rjmp	.-254    	; 0xe8 <main+0x26>

Disassembly of section .text.__dummy_fini:

0000037c <_fini>:
 37c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000037e <__funcs_on_exit>:
 37e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000380 <__simulator_exit>:
 380:	08 95       	ret

Disassembly of section .text.exit:

00000330 <exit>:
 330:	ec 01       	movw	r28, r24
 332:	0e 94 bf 01 	call	0x37e	; 0x37e <__funcs_on_exit>
 336:	0e 94 be 01 	call	0x37c	; 0x37c <_fini>
 33a:	ce 01       	movw	r24, r28
 33c:	0e 94 c0 01 	call	0x380	; 0x380 <__simulator_exit>
 340:	ce 01       	movw	r24, r28
 342:	0e 94 bc 01 	call	0x378	; 0x378 <_Exit>

Disassembly of section .text._Exit:

00000378 <_Exit>:
 378:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
