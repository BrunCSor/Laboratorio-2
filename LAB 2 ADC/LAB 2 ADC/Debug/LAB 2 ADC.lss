
LAB 2 ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000224  000002d8  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000307  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000315  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a8e  00000000  00000000  00000355  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000756  00000000  00000000  00000de3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032f  00000000  00000000  00001539  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001868  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e7  00000000  00000000  00001ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000212  00000212  000002c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c00  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.ADC_init 0000000e  00000204  00000204  000002b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.ADC_read 00000034  00000190  00000190  00000244  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.setup   0000002a  000001c4  000001c4  00000278  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_1 00000056  0000013a  0000013a  000001ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    00000072  000000c8  000000c8  0000017c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .bss.indice_velocidad 00000001  00800104  00800104  000002d8  2**0
                  ALLOC
 20 .data.velocidades 00000004  00800100  00000220  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .bss.sistema_encendido 00000001  00800105  00800105  000002d8  2**0
                  ALLOC
 22 .text.__dummy_fini 00000002  0000021a  0000021a  000002ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_funcs_on_exit 00000002  0000021c  0000021c  000002d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_simulator_exit 00000002  0000021e  0000021e  000002d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.exit    00000016  000001ee  000001ee  000002a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text._Exit   00000004  00000216  00000216  000002ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_1>
   8:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
   c:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
  10:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
  14:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
  18:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
  1c:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
  20:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
  24:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
  28:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
  2c:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
  30:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
  34:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
  38:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
  3c:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
  40:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
  44:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
  48:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
  4c:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
  50:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
  54:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
  58:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
  5c:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
  60:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
  64:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 04       	cpc	r0, r1
  6c:	00 02       	muls	r16, r16
  6e:	20 01       	movw	r4, r0
  70:	04 01       	movw	r0, r8
  72:	06 80       	ldd	r0, Z+6	; 0x06

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e8 e6       	ldi	r30, 0x68	; 104
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e4 37       	cpi	r30, 0x74	; 116
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 64 00 	call	0xc8	; 0xc8 <_etext>
  c0:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

00000212 <__bad_interrupt>:
 212:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.ADC_init:

00000204 <ADC_init>:
uint8_t velocidades[4] = {64, 128, 192, 255}; // Definir las 4 velocidades
uint8_t indice_velocidad = 0;

void ADC_init() {

	ADMUX = (1<<REFS0);
 204:	80 e4       	ldi	r24, 0x40	; 64
 206:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 20a:	87 e8       	ldi	r24, 0x87	; 135
 20c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 210:	08 95       	ret

Disassembly of section .text.ADC_read:

00000190 <ADC_read>:
}

uint16_t ADC_read(uint8_t ch) {

	ch &= 0b00000111;
 190:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;
 192:	ec e7       	ldi	r30, 0x7C	; 124
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	90 81       	ld	r25, Z
 198:	98 7f       	andi	r25, 0xF8	; 248
 19a:	89 2b       	or	r24, r25
 19c:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC);
 19e:	ea e7       	ldi	r30, 0x7A	; 122
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	80 64       	ori	r24, 0x40	; 64
 1a6:	80 83       	st	Z, r24

	while(!(ADCSRA & (1<<ADIF)));
 1a8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1ac:	84 ff       	sbrs	r24, 4
 1ae:	fc cf       	rjmp	.-8      	; 0x1a8 <ADC_read+0x18>

	ADCSRA|=(1<<ADIF);
 1b0:	ea e7       	ldi	r30, 0x7A	; 122
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	80 61       	ori	r24, 0x10	; 16
 1b8:	80 83       	st	Z, r24

	return (ADC);
 1ba:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1be:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 1c2:	08 95       	ret

Disassembly of section .text.setup:

000001c4 <setup>:

void setup() {
	// Configurar el PWM
	TCCR0A |= (1 << COM0A1) | (1 << WGM00); // Modo no invertido, modo rápido PWM
 1c4:	84 b5       	in	r24, 0x24	; 36
 1c6:	81 68       	ori	r24, 0x81	; 129
 1c8:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00); // Sin preescalador
 1ca:	85 b5       	in	r24, 0x25	; 37
 1cc:	81 60       	ori	r24, 0x01	; 1
 1ce:	85 bd       	out	0x25, r24	; 37
	DDRD |= (1 << PD5) | (1 << PD6); // Salida PD5 y PD6
 1d0:	8a b1       	in	r24, 0x0a	; 10
 1d2:	80 66       	ori	r24, 0x60	; 96
 1d4:	8a b9       	out	0x0a, r24	; 10

	// Configurar interrupciones externas para el pulsador
	EICRA |= (1 << ISC01); // Interrupción en flanco de bajada
 1d6:	e9 e6       	ldi	r30, 0x69	; 105
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	82 60       	ori	r24, 0x02	; 2
 1de:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0); // Habilitar interrupción externa INT0
 1e0:	8d b3       	in	r24, 0x1d	; 29
 1e2:	81 60       	ori	r24, 0x01	; 1
 1e4:	8d bb       	out	0x1d, r24	; 29

	sei(); // Habilitar interrupciones globales
 1e6:	78 94       	sei

	ADC_init(); 
 1e8:	0e 94 02 01 	call	0x204	; 0x204 <ADC_init>
 1ec:	08 95       	ret

Disassembly of section .text.__vector_1:

0000013a <__vector_1>:
}

ISR(INT0_vect) {
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
	sistema_encendido = !sistema_encendido; // Cambiar estado del sistema
 148:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <sistema_encendido>
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	91 11       	cpse	r25, r1
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <sistema_encendido>

	if(sistema_encendido) {
 156:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sistema_encendido>
 15a:	88 23       	and	r24, r24
 15c:	39 f0       	breq	.+14     	; 0x16c <__vector_1+0x32>
		PORTB |= (1 << PB0); // Encender LED verde
 15e:	85 b1       	in	r24, 0x05	; 5
 160:	81 60       	ori	r24, 0x01	; 1
 162:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << PB1); // Apagar LED rojo
 164:	85 b1       	in	r24, 0x05	; 5
 166:	8d 7f       	andi	r24, 0xFD	; 253
 168:	85 b9       	out	0x05, r24	; 5
 16a:	0b c0       	rjmp	.+22     	; 0x182 <__vector_1+0x48>
		} else {
		PORTB &= ~(1 << PB0); // Apagar LED verde
 16c:	85 b1       	in	r24, 0x05	; 5
 16e:	8e 7f       	andi	r24, 0xFE	; 254
 170:	85 b9       	out	0x05, r24	; 5
		PORTB |= (1 << PB1); // Encender LED rojo
 172:	85 b1       	in	r24, 0x05	; 5
 174:	82 60       	ori	r24, 0x02	; 2
 176:	85 b9       	out	0x05, r24	; 5
		OCR0A = OCR0B = 0; // Parar los motores
 178:	18 bc       	out	0x28, r1	; 40
 17a:	17 bc       	out	0x27, r1	; 39
		PORTB &= ~(1 << PB2); // Apagar LED blanco
 17c:	85 b1       	in	r24, 0x05	; 5
 17e:	8b 7f       	andi	r24, 0xFB	; 251
 180:	85 b9       	out	0x05, r24	; 5
	}
}
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

Disassembly of section .text.main:

000000c8 <main>:

int main(void) {
	setup();
  c8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <setup>
	
	while(1) {
		if(sistema_encendido) {
  cc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sistema_encendido>
  d0:	88 23       	and	r24, r24
  d2:	49 f1       	breq	.+82     	; 0x126 <main+0x5e>
			uint16_t adc_result = ADC_read(0); 
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	0e 94 c8 00 	call	0x190	; 0x190 <ADC_read>

			if(adc_result > 512) {
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	92 40       	sbci	r25, 0x02	; 2
  de:	20 f0       	brcs	.+8      	; 0xe8 <main+0x20>
				PORTB |= (1 << PB2); // Encender LED blanco
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	84 60       	ori	r24, 0x04	; 4
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	03 c0       	rjmp	.+6      	; 0xee <main+0x26>
				} else {
				PORTB &= ~(1 << PB2); // Apagar LED blanco
  e8:	85 b1       	in	r24, 0x05	; 5
  ea:	8b 7f       	andi	r24, 0xFB	; 251
  ec:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	9b e7       	ldi	r25, 0x7B	; 123
  f2:	22 e9       	ldi	r18, 0x92	; 146
  f4:	81 50       	subi	r24, 0x01	; 1
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	20 40       	sbci	r18, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x2c>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x36>
  fe:	00 00       	nop
			}

			_delay_ms(3000); 

			OCR0A = OCR0B = velocidades[indice_velocidad]; // Control de velocidad del motor
 100:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <indice_velocidad>
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	e0 50       	subi	r30, 0x00	; 0
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	80 81       	ld	r24, Z
 10c:	88 bd       	out	0x28, r24	; 40
 10e:	87 bd       	out	0x27, r24	; 39

			indice_velocidad++;
 110:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <indice_velocidad>
 114:	8f 5f       	subi	r24, 0xFF	; 255
 116:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <indice_velocidad>
			if(indice_velocidad > 3) {
 11a:	84 30       	cpi	r24, 0x04	; 4
 11c:	20 f0       	brcs	.+8      	; 0x126 <main+0x5e>
				indice_velocidad = 0;
 11e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <indice_velocidad>
				OCR0A = OCR0B = 0; //Apagar motores
 122:	18 bc       	out	0x28, r1	; 40
 124:	17 bc       	out	0x27, r1	; 39
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	9b e7       	ldi	r25, 0x7B	; 123
 12a:	22 e9       	ldi	r18, 0x92	; 146
 12c:	81 50       	subi	r24, 0x01	; 1
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	20 40       	sbci	r18, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x64>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x6e>
 136:	00 00       	nop
 138:	c9 cf       	rjmp	.-110    	; 0xcc <main+0x4>

Disassembly of section .text.__dummy_fini:

0000021a <_fini>:
 21a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000021c <__funcs_on_exit>:
 21c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000021e <__simulator_exit>:
 21e:	08 95       	ret

Disassembly of section .text.exit:

000001ee <exit>:
 1ee:	ec 01       	movw	r28, r24
 1f0:	0e 94 0e 01 	call	0x21c	; 0x21c <__funcs_on_exit>
 1f4:	0e 94 0d 01 	call	0x21a	; 0x21a <_fini>
 1f8:	ce 01       	movw	r24, r28
 1fa:	0e 94 0f 01 	call	0x21e	; 0x21e <__simulator_exit>
 1fe:	ce 01       	movw	r24, r28
 200:	0e 94 0b 01 	call	0x216	; 0x216 <_Exit>

Disassembly of section .text._Exit:

00000216 <_Exit>:
 216:	0e 94 62 00 	call	0xc4	; 0xc4 <_exit>
