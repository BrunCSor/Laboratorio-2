
Lab 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000382  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000003b1  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000003bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000be6  00000000  00000000  0000043f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000730  00000000  00000000  00001025  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000568  00000000  00000000  00001755  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  00001cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000220  00000000  00000000  00001fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000021f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000300  00000300  00000374  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002264  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_2 0000005c  00000164  00000164  000001d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.ADC_read 00000034  000001c0  000001c0  00000234  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.ADC_init 0000000e  000002d2  000002d2  00000346  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.confPWM 00000028  00000254  00000254  000002c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.confPWM_2 0000002e  00000226  00000226  0000029a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.confPWM_3 00000020  0000027c  0000027c  000002f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.PWM_1   00000008  000002e0  000002e0  00000354  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.PWM_2   00000008  000002e8  000002e8  0000035c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.PWM_3   00000008  000002f0  000002f0  00000364  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.PWM_4   00000008  000002f8  000002f8  0000036c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.SEN     00000032  000001f4  000001f4  00000268  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.EICRACONFIG 00000020  0000029c  0000029c  00000310  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.main    000000e4  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__dummy_fini 00000002  00000308  00000308  0000037c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_funcs_on_exit 00000002  0000030a  0000030a  0000037e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__dummy_simulator_exit 00000002  0000030c  0000030c  00000380  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.exit    00000016  000002bc  000002bc  00000330  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text._Exit   00000004  00000304  00000304  00000378  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
   8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_2>
   c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  10:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  14:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  18:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  1c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  20:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  24:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  28:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  2c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  30:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  34:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  38:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  3c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  40:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  44:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  48:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  4c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  50:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  54:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  58:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  5c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  60:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  64:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

00000300 <__bad_interrupt>:
 300:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_2:

00000164 <__vector_2>:
#define Valor_PWM_3 200
#define Valor_PWM_4 255


ISR(INT1_vect) // Función que se ejecuta cuando se produce la interrupción INT0
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	2f 93       	push	r18
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
	PORTD &= ~(1 << PORTD1); //apago led blanca
 174:	8b b1       	in	r24, 0x0b	; 11
 176:	8d 7f       	andi	r24, 0xFD	; 253
 178:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << PORTD2); //apago led verde
 17a:	8b b1       	in	r24, 0x0b	; 11
 17c:	8b 7f       	andi	r24, 0xFB	; 251
 17e:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1 << PORTD4); //apago led rojo
 180:	8b b1       	in	r24, 0x0b	; 11
 182:	8f 7e       	andi	r24, 0xEF	; 239
 184:	8b b9       	out	0x0b, r24	; 11
	PORTC &= ~(1 << PORTC1); //apago motor
 186:	88 b1       	in	r24, 0x08	; 8
 188:	8d 7f       	andi	r24, 0xFD	; 253
 18a:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << PORTC2); //apago motor
 18c:	88 b1       	in	r24, 0x08	; 8
 18e:	8b 7f       	andi	r24, 0xFB	; 251
 190:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << PORTC3); //apago motor
 192:	88 b1       	in	r24, 0x08	; 8
 194:	87 7f       	andi	r24, 0xF7	; 247
 196:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << PORTC4); //apago motor
 198:	88 b1       	in	r24, 0x08	; 8
 19a:	8f 7e       	andi	r24, 0xEF	; 239
 19c:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	81 e1       	ldi	r24, 0x11	; 17
 1a2:	9a e7       	ldi	r25, 0x7A	; 122
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <__vector_2+0x40>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <__vector_2+0x4a>
 1ae:	00 00       	nop
_delay_ms(2500); // pausa de 10s después de presionar el botón}

}
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	2f 91       	pop	r18
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

Disassembly of section .text.ADC_read:

000001c0 <ADC_read>:


uint16_t ADC_read(uint8_t ch) {

	ch &= 0b00000111;
 1c0:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;
 1c2:	ec e7       	ldi	r30, 0x7C	; 124
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	90 81       	ld	r25, Z
 1c8:	98 7f       	andi	r25, 0xF8	; 248
 1ca:	89 2b       	or	r24, r25
 1cc:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
 1ce:	ea e7       	ldi	r30, 0x7A	; 122
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	80 64       	ori	r24, 0x40	; 64
 1d6:	80 83       	st	Z, r24
	
	while(!(ADCSRA & (1<<ADIF)));
 1d8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1dc:	84 ff       	sbrs	r24, 4
 1de:	fc cf       	rjmp	.-8      	; 0x1d8 <ADC_read+0x18>
	ADCSRA|=(1<<ADIF);
 1e0:	ea e7       	ldi	r30, 0x7A	; 122
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	80 61       	ori	r24, 0x10	; 16
 1e8:	80 83       	st	Z, r24

	return (ADC);
 1ea:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1ee:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 1f2:	08 95       	ret

Disassembly of section .text.ADC_init:

000002d2 <ADC_init>:
	return 0;
}


void ADC_init() {
	ADMUX = (1<<REFS0);
 2d2:	80 e4       	ldi	r24, 0x40	; 64
 2d4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 2d8:	87 e8       	ldi	r24, 0x87	; 135
 2da:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 2de:	08 95       	ret

Disassembly of section .text.confPWM:

00000254 <confPWM>:
}

void confPWM(){
	// PB1 Activado
	DDRD |= (1 << DDD5)|(1 << DDD6);
 254:	8a b1       	in	r24, 0x0a	; 10
 256:	80 66       	ori	r24, 0x60	; 96
 258:	8a b9       	out	0x0a, r24	; 10
	
	// no invertido
	TCCR1A |= (1 << COM1A1)|(1 << COM1B1);
 25a:	e0 e8       	ldi	r30, 0x80	; 128
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	80 6a       	ori	r24, 0xA0	; 160
 262:	80 83       	st	Z, r24
	
	// Fast PWM mode usando ICR1 como TOP
	TCCR1A |= (1 << WGM11);
 264:	80 81       	ld	r24, Z
 266:	82 60       	ori	r24, 0x02	; 2
 268:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
 26a:	e1 e8       	ldi	r30, 0x81	; 129
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	88 61       	ori	r24, 0x18	; 24
 272:	80 83       	st	Z, r24
	
	// Timer con preescaler de 8
	TCCR1B |= (1 << CS11);
 274:	80 81       	ld	r24, Z
 276:	82 60       	ori	r24, 0x02	; 2
 278:	80 83       	st	Z, r24
 27a:	08 95       	ret

Disassembly of section .text.confPWM_2:

00000226 <confPWM_2>:
}

void confPWM_2(){
	// PB1 Activado
	DDRD |= (1 << DDD5);
 226:	8a b1       	in	r24, 0x0a	; 10
 228:	80 62       	ori	r24, 0x20	; 32
 22a:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << DDD6);
 22c:	8a b1       	in	r24, 0x0a	; 10
 22e:	8f 7b       	andi	r24, 0xBF	; 191
 230:	8a b9       	out	0x0a, r24	; 10
	// no invertido
	TCCR1A |= (1 << COM1A1)|(1 << COM1B1);
 232:	e0 e8       	ldi	r30, 0x80	; 128
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	80 6a       	ori	r24, 0xA0	; 160
 23a:	80 83       	st	Z, r24
	
	// Fast PWM mode usando ICR1 como TOP
	TCCR1A |= (1 << WGM11);
 23c:	80 81       	ld	r24, Z
 23e:	82 60       	ori	r24, 0x02	; 2
 240:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
 242:	e1 e8       	ldi	r30, 0x81	; 129
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	88 61       	ori	r24, 0x18	; 24
 24a:	80 83       	st	Z, r24
	
	// Timer con preescaler de 8
	TCCR1B |= (1 << CS11);
 24c:	80 81       	ld	r24, Z
 24e:	82 60       	ori	r24, 0x02	; 2
 250:	80 83       	st	Z, r24
 252:	08 95       	ret

Disassembly of section .text.confPWM_3:

0000027c <confPWM_3>:

}

void confPWM_3(){
	// PB1 Activado
	DDRD &= ~(1 << DDD5);
 27c:	8a b1       	in	r24, 0x0a	; 10
 27e:	8f 7d       	andi	r24, 0xDF	; 223
 280:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD6);
 282:	8a b1       	in	r24, 0x0a	; 10
 284:	80 64       	ori	r24, 0x40	; 64
 286:	8a b9       	out	0x0a, r24	; 10
	// Configurar Timer0 en modo Fast PWM
	TCCR0A |= (1 << WGM00)|(1 << WGM01);
 288:	84 b5       	in	r24, 0x24	; 36
 28a:	83 60       	ori	r24, 0x03	; 3
 28c:	84 bd       	out	0x24, r24	; 36
	
	// Configurar Timer0 para no invertir la señal PWM
	TCCR0A |= (1 << COM0A1)|(1 << COM0B1);
 28e:	84 b5       	in	r24, 0x24	; 36
 290:	80 6a       	ori	r24, 0xA0	; 160
 292:	84 bd       	out	0x24, r24	; 36
	
	// Iniciar Timer0 con preescaler de 8
	TCCR0B |= (1 << CS11);
 294:	85 b5       	in	r24, 0x25	; 37
 296:	82 60       	ori	r24, 0x02	; 2
 298:	85 bd       	out	0x25, r24	; 37
 29a:	08 95       	ret

Disassembly of section .text.PWM_1:

000002e0 <PWM_1>:

}

void PWM_1(){
	OCR0A = Valor_PWM_1;
 2e0:	8a ea       	ldi	r24, 0xAA	; 170
 2e2:	87 bd       	out	0x27, r24	; 39
	OCR0B = Valor_PWM_1;
 2e4:	88 bd       	out	0x28, r24	; 40
 2e6:	08 95       	ret

Disassembly of section .text.PWM_2:

000002e8 <PWM_2>:
}

void PWM_2(){

	
	OCR0A = Valor_PWM_2;
 2e8:	8e eb       	ldi	r24, 0xBE	; 190
 2ea:	87 bd       	out	0x27, r24	; 39
	OCR0B = Valor_PWM_2;
 2ec:	88 bd       	out	0x28, r24	; 40
 2ee:	08 95       	ret

Disassembly of section .text.PWM_3:

000002f0 <PWM_3>:
}

void PWM_3(){
	
	
	OCR0A = Valor_PWM_3;
 2f0:	88 ec       	ldi	r24, 0xC8	; 200
 2f2:	87 bd       	out	0x27, r24	; 39
	OCR0B = Valor_PWM_3;
 2f4:	88 bd       	out	0x28, r24	; 40
 2f6:	08 95       	ret

Disassembly of section .text.PWM_4:

000002f8 <PWM_4>:
}

void PWM_4(){

	
	OCR0A = Valor_PWM_4;
 2f8:	8f ef       	ldi	r24, 0xFF	; 255
 2fa:	87 bd       	out	0x27, r24	; 39
	OCR0B = Valor_PWM_4;
 2fc:	88 bd       	out	0x28, r24	; 40
 2fe:	08 95       	ret

Disassembly of section .text.SEN:

000001f4 <SEN>:
	
	
}

void SEN(){
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
	int i = 200;
 1f8:	c8 ec       	ldi	r28, 0xC8	; 200
 1fa:	d0 e0       	ldi	r29, 0x00	; 0
	while(i > 100) {
 1fc:	0e c0       	rjmp	.+28     	; 0x21a <SEN+0x26>
		uint16_t adc_result = ADC_read(0);
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <ADC_read>

		if(adc_result < 400) {
 204:	80 39       	cpi	r24, 0x90	; 144
 206:	91 40       	sbci	r25, 0x01	; 1
 208:	20 f4       	brcc	.+8      	; 0x212 <SEN+0x1e>
			PORTD |= (1 << PD1);
 20a:	8b b1       	in	r24, 0x0b	; 11
 20c:	82 60       	ori	r24, 0x02	; 2
 20e:	8b b9       	out	0x0b, r24	; 11
 210:	03 c0       	rjmp	.+6      	; 0x218 <SEN+0x24>
			} else {
			PORTD &= ~(1 << PD1);
 212:	8b b1       	in	r24, 0x0b	; 11
 214:	8d 7f       	andi	r24, 0xFD	; 253
 216:	8b b9       	out	0x0b, r24	; 11
		}
		i--;
 218:	21 97       	sbiw	r28, 0x01	; 1
	
}

void SEN(){
	int i = 200;
	while(i > 100) {
 21a:	c5 36       	cpi	r28, 0x65	; 101
 21c:	d1 05       	cpc	r29, r1
 21e:	7c f7       	brge	.-34     	; 0x1fe <SEN+0xa>
		}
		i--;
		_delay_ms(0);
	}
	
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

Disassembly of section .text.EICRACONFIG:

0000029c <EICRACONFIG>:

void EICRACONFIG(){
	DDRD |= (1 << PD3); // Configurar el pin PD3 como salida
 29c:	8a b1       	in	r24, 0x0a	; 10
 29e:	88 60       	ori	r24, 0x08	; 8
 2a0:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << PD3); // Poner el pin PD3 en nivel bajo
 2a2:	8b b1       	in	r24, 0x0b	; 11
 2a4:	87 7f       	andi	r24, 0xF7	; 247
 2a6:	8b b9       	out	0x0b, r24	; 11
	EICRA |= (1 << ISC10); // INT1 por cambio de valor
 2a8:	e9 e6       	ldi	r30, 0x69	; 105
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	84 60       	ori	r24, 0x04	; 4
 2b0:	80 83       	st	Z, r24
	// Habilitar la interrupción
	EIMSK |= (1 << INT1);
 2b2:	8d b3       	in	r24, 0x1d	; 29
 2b4:	82 60       	ori	r24, 0x02	; 2
 2b6:	8d bb       	out	0x1d, r24	; 29
	sei();
 2b8:	78 94       	sei
 2ba:	08 95       	ret

Disassembly of section .text.main:

00000080 <main>:
void SEN();
void EICRACONFIG();


int main(void) {
	ICR1 = F_CPU / (8 * PWM_Frecuencia) - 1;
  80:	8f e3       	ldi	r24, 0x3F	; 63
  82:	9f e1       	ldi	r25, 0x1F	; 31
  84:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  88:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	EICRACONFIG();
  8c:	0e 94 4e 01 	call	0x29c	; 0x29c <EICRACONFIG>

	//confPWM();
	DDRD |= (1 << PD1)|(1 << PD2)|(1 << PD4);
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	86 61       	ori	r24, 0x16	; 22
  94:	8a b9       	out	0x0a, r24	; 10
	DDRC |= (1 << PC2)|(1 << PC4);
  96:	87 b1       	in	r24, 0x07	; 7
  98:	84 61       	ori	r24, 0x14	; 20
  9a:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1 << PC1)|(1 << PC3);
  9c:	87 b1       	in	r24, 0x07	; 7
  9e:	8a 60       	ori	r24, 0x0A	; 10
  a0:	87 b9       	out	0x07, r24	; 7
	//DDRB = 0xFF;
	ADC_init();
  a2:	0e 94 69 01 	call	0x2d2	; 0x2d2 <ADC_init>
	
	while(1) {
		
		SEN();
  a6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <SEN>
		PORTD &= ~(1 << PORTD4); //apago led rojo
  aa:	8b b1       	in	r24, 0x0b	; 11
  ac:	8f 7e       	andi	r24, 0xEF	; 239
  ae:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1 << PORTD2); //prendo led verde
  b0:	8b b1       	in	r24, 0x0b	; 11
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	8b b9       	out	0x0b, r24	; 11
		PWM_1();
  b6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <PWM_1>
		PORTC &= ~(1 << PORTC2);
  ba:	88 b1       	in	r24, 0x08	; 8
  bc:	8b 7f       	andi	r24, 0xFB	; 251
  be:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC4);
  c0:	88 b1       	in	r24, 0x08	; 8
  c2:	8f 7e       	andi	r24, 0xEF	; 239
  c4:	88 b9       	out	0x08, r24	; 8
		PORTC |= (1 << PORTC1);
  c6:	88 b1       	in	r24, 0x08	; 8
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	88 b9       	out	0x08, r24	; 8
		PORTC |= (1 << PORTC3);
  cc:	88 b1       	in	r24, 0x08	; 8
  ce:	88 60       	ori	r24, 0x08	; 8
  d0:	88 b9       	out	0x08, r24	; 8
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	8b e7       	ldi	r24, 0x7B	; 123
  d6:	92 e9       	ldi	r25, 0x92	; 146
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x58>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x62>
  e2:	00 00       	nop
		_delay_ms(3000);
		

		confPWM_2();
  e4:	0e 94 13 01 	call	0x226	; 0x226 <confPWM_2>
		SEN();
  e8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <SEN>
		PWM_2();
  ec:	0e 94 74 01 	call	0x2e8	; 0x2e8 <PWM_2>
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	8b e7       	ldi	r24, 0x7B	; 123
  f4:	92 e9       	ldi	r25, 0x92	; 146
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x76>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x80>
 100:	00 00       	nop
		_delay_ms(3000);
		
		SEN();
 102:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <SEN>
		confPWM_3();
 106:	0e 94 3e 01 	call	0x27c	; 0x27c <confPWM_3>
		PWM_3();
 10a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <PWM_3>
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	8b e7       	ldi	r24, 0x7B	; 123
 112:	92 e9       	ldi	r25, 0x92	; 146
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x94>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x9e>
 11e:	00 00       	nop
		_delay_ms(3000);
		
		SEN();
 120:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <SEN>
		confPWM();
 124:	0e 94 2a 01 	call	0x254	; 0x254 <confPWM>
		PORTD &= ~(1 << PORTD2); //apago led verde
 128:	8b b1       	in	r24, 0x0b	; 11
 12a:	8b 7f       	andi	r24, 0xFB	; 251
 12c:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1 << PORTD4); //prendo led rojo
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	80 61       	ori	r24, 0x10	; 16
 132:	8b b9       	out	0x0b, r24	; 11

		PORTC &= ~(1 << PORTC1);
 134:	88 b1       	in	r24, 0x08	; 8
 136:	8d 7f       	andi	r24, 0xFD	; 253
 138:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC3);
 13a:	88 b1       	in	r24, 0x08	; 8
 13c:	87 7f       	andi	r24, 0xF7	; 247
 13e:	88 b9       	out	0x08, r24	; 8
		PORTC |= (1 << PORTC4);
 140:	88 b1       	in	r24, 0x08	; 8
 142:	80 61       	ori	r24, 0x10	; 16
 144:	88 b9       	out	0x08, r24	; 8
		PORTC |= (1 << PORTC2);
 146:	88 b1       	in	r24, 0x08	; 8
 148:	84 60       	ori	r24, 0x04	; 4
 14a:	88 b9       	out	0x08, r24	; 8
		PWM_4();
 14c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <PWM_4>
 150:	2f ef       	ldi	r18, 0xFF	; 255
 152:	8b e7       	ldi	r24, 0x7B	; 123
 154:	92 e9       	ldi	r25, 0x92	; 146
 156:	21 50       	subi	r18, 0x01	; 1
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <main+0xd6>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0xe0>
 160:	00 00       	nop
 162:	a1 cf       	rjmp	.-190    	; 0xa6 <main+0x26>

Disassembly of section .text.__dummy_fini:

00000308 <_fini>:
 308:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000030a <__funcs_on_exit>:
 30a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000030c <__simulator_exit>:
 30c:	08 95       	ret

Disassembly of section .text.exit:

000002bc <exit>:
 2bc:	ec 01       	movw	r28, r24
 2be:	0e 94 85 01 	call	0x30a	; 0x30a <__funcs_on_exit>
 2c2:	0e 94 84 01 	call	0x308	; 0x308 <_fini>
 2c6:	ce 01       	movw	r24, r28
 2c8:	0e 94 86 01 	call	0x30c	; 0x30c <__simulator_exit>
 2cc:	ce 01       	movw	r24, r28
 2ce:	0e 94 82 01 	call	0x304	; 0x304 <_Exit>

Disassembly of section .text._Exit:

00000304 <_Exit>:
 304:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
